---
- name: Install Docker Engine and essentials on Ubuntu
  hosts: all
  become: yes

  vars:
    docker_user: '{{ ansible_user }}'
    docker_config_dir: '/home/{{ docker_user }}/.docker'

  tasks:
    - name: Install required packages
      apt:
        name:
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: present
        update_cache: yes

    - name: Create keyrings directory
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Add Docker GPG key
      shell: |
        curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor -o /etc/apt/keyrings/docker.gpg
        chmod a+r /etc/apt/keyrings/docker.gpg
      args:
        creates: /etc/apt/keyrings/docker.gpg

    - name: Add Docker repository
      shell: |
        echo "deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | tee /etc/apt/sources.list.d/docker.list > /dev/null
      args:
        creates: /etc/apt/sources.list.d/docker.list

    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install Docker packages
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: present

    - name: Create Docker daemon configuration directory
      file:
        path: /etc/docker
        state: directory
        mode: '0755'

    - name: Configure Docker daemon with logging and performance settings
      copy:
        content: |
          {
            "log-driver": "json-file",
            "log-opts": {
              "max-size": "10m",
              "max-file": "3"
            },
            "storage-driver": "overlay2",
            "features": {
              "buildkit": true
            },
            "metrics-addr": "127.0.0.1:9323",
            "experimental": false,
            "default-address-pools": [
              {
                "base": "172.17.0.0/16",
                "size": 24
              }
            ]
          }
        dest: /etc/docker/daemon.json
        mode: '0644'
      notify: restart docker

    - name: Add user to docker group
      user:
        name: '{{ docker_user }}'
        groups: docker
        append: yes

    - name: Create user Docker config directory
      file:
        path: '{{ docker_config_dir }}'
        state: directory
        owner: '{{ docker_user }}'
        group: '{{ docker_user }}'
        mode: '0700'

    - name: Create user Docker CLI config
      copy:
        content: |
          {
            "experimental": "enabled"
          }
        dest: '{{ docker_config_dir }}/config.json'
        owner: '{{ docker_user }}'
        group: '{{ docker_user }}'
        mode: '0644'

    - name: Set Docker environment variables in profile
      blockinfile:
        path: '/home/{{ docker_user }}/.bashrc'
        block: |
          # Docker environment variables for server use
          export DOCKER_BUILDKIT=1
          export COMPOSE_DOCKER_CLI_BUILD=1
          export BUILDKIT_PROGRESS=plain
        marker: '# {mark} ANSIBLE MANAGED DOCKER CONFIG'
        create: yes
        owner: '{{ docker_user }}'
        group: '{{ docker_user }}'
        mode: '0644'

    - name: Enable and start Docker service
      systemd:
        name: docker
        enabled: yes
        state: started

    - name: Wait for Docker to be ready
      command: docker info
      register: docker_info
      retries: 5
      delay: 3
      until: docker_info.rc == 0
      changed_when: false

    - name: Verify Docker Compose
      command: docker compose version
      register: compose_version
      changed_when: false

    - name: Create weekly Docker cleanup cron job
      cron:
        name: 'Docker system prune'
        minute: '0'
        hour: '2'
        weekday: '0'
        job: "/usr/bin/docker system prune -af --volumes --filter 'until=168h' >> /var/log/docker-prune.log 2>&1"
        user: root

  handlers:
    - name: restart docker
      systemd:
        name: docker
        state: restarted
